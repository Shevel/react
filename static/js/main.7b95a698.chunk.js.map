{"version":3,"sources":["components/common/Paginator/Paginator.module.css","assets/image/noavatar.jpg","utils/validators.ts","components/Users/UsersSearchForm/UsersSearchForm.module.css","components/common/FormControls/FormControls.module.css","components/Header/logo192.png","api/profileApi.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","assets/image/icon-404.png","api/api.ts","constant/env.ts","constant/routes.ts","components/LoginPage/Login.module.css","redux/appReducer.ts","hoc/withSuspense.tsx","redux/sidebarReducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.tsx","components/Chat/Chat.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/usersSelectors.ts","components/Users/User.tsx","components/Users/UsersSearchForm/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","redux/authSelectors.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","components/LoginPage/LoginPage.tsx","components/Users/Users.module.css","components/common/FormControls/FormControls.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","api/userApi.ts","utils/objectsHelper.ts","redux/usersReducer.ts","components/Header/Header.module.css","api/chat-api.ts","redux/chatReducer.ts"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","instance","get","then","response","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","postsData","profileReducer","state","action","type","id","string","postMessage","likesCount","filter","post","photos","actions","newPost","deletePost","setStatus","setUserProfile","saveMainAvatarSuccess","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCode","Success","alert","saveMainAvatar","file","saveProfile","getState","profileData","auth","Error","stopSubmit","_error","messages","Promise","reject","messagesData","dialogsData","name","dialogsReducer","textMessage","sendMessage","ResultCodeForCaptcha","ENV","process","axios","create","withCredentials","baseURL","ROUTES","CHAT","LOGIN","DIALOGS","PROFILE","MY_PROFILE","USERS","NEWS","MUSIC","SETTINGS","NOT_FOUND","initialized","withSuspense","Component","props","fallback","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","usersReducer","authReducer","chat","chatReducer","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Content","Layout","Footer","DialogsContainer","React","lazy","SuspendedProfile","SuspendedDialogs","App","catchAllUnhandledErrors","event","this","initApp","addEventListener","removeEventListener","style","minHeight","className","padding","maxWidth","margin","exact","path","render","to","component","Chat","News","Music","Settings","textAlign","background","color","AppContainer","withRouter","connect","getAuthUserData","MainApplication","ReactDOM","StrictMode","document","getElementById","Preloader","size","Paginator","totalItemsCount","pageSize","onPageChanged","currentPage","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftLimit","rightLimit","styles","onClick","filteringPage","map","page","key","page_container","clNames","selected","pagination_item","useSelector","useDispatch","useEffect","startMessagesListening","stopMessagesListening","AddMessagesReduxForm","Messages","autoScrollRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","maxHeight","overflowY","onScroll","e","element","currentTarget","abs","scrollHeight","scrollTop","clientHeight","m","index","Message","message","ref","memo","display","justifyContent","alignItems","marginTop","marginRight","borderRadius","src","photo","noava","width","alt","userName","reduxForm","setMessage","placeholder","onChange","trim","getUsers","createSelector","users","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","User","user","follow","unfollow","user_avaBlock","avatar","small","noavatar","followed","disabled","some","user_info","person","UsersSearchForm","onFilterChanged","initialValues","term","friend","String","enableReinitialize","onSubmit","values","setSubmitting","isSubmitting","s","formFilter","filterSelect","as","nameFilter","htmlType","SearchOutlined","Users","history","useHistory","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","getUsersThunk","pathname","subscribe","unsubscribe","marginBottom","fontSize","notFound","pageNumber","UsersPage","getIsAuth","isAuth","getLogin","login","Header","justify","align","logo","Logo","flex","login_block","login_info","login_name","slice","logout","Sider","Navbar","mode","height","Item","icon","SmileOutlined","UserOutlined","CommentOutlined","CustomerServiceOutlined","GlobalOutlined","WechatOutlined","SettingOutlined","LoginReduxForm","handleSubmit","error","captchaURL","login_form","classnames","login_input","mb_20","createField","Input","remember_me","undefined","captcha","btn","summaryErrorBlock","summaryErrorBlock__message","LoginPage","login_page","email","password","rememberMe","FormControl","meta","touched","children","hasError","textareaContainer","formControl","Textarea","input","restProps","validators","validate","authAPI","delete","securityAPI","url","payload","meData","loginData","CaptchaIsRequired","getCaptchaUrl","usersAPI","updateObjectInArray","items","itemId","objPropName","newObjProp","userID","toggleIsFetching","setCurrentPage","setFilter","setUsers","setUsersTotalCount","totalCount","followUnfollowFlow","apiMethod","actionCreator","toggleIsFollowing","followSuccess","unfollowSuccess","socket","subscribers","messagesRecieved","statusChanged","closeHandler","console","log","notifyAboutStatus","setTimeout","createWsChannel","cleanUp","messageHandler","openHandler","errorHandler","forEach","close","WebSocket","newMessages","JSON","parse","chat_api","eventName","callback","send","_newMessageHandler","newMassageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator"],"mappings":"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","file":"static/js/main.7b95a698.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Paginator_pages__3CpKL\",\"pagination_item\":\"Paginator_pagination_item__3V1zt\",\"selected\":\"Paginator_selected__2iR5_\",\"paginator_btn\":\"Paginator_paginator_btn__1TJhr\",\"page_container\":\"Paginator_page_container__16pXy\"};","module.exports = __webpack_public_path__ + \"static/media/noavatar.88962eb7.jpg\";","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\r\n  value\r\n) => {\r\n  if (value && value.length > maxLength)\r\n    return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formFilter\":\"UsersSearchForm_formFilter__1wd09\",\"filterSelect\":\"UsersSearchForm_filterSelect__169Jn\",\"nameFilter\":\"UsersSearchForm_nameFilter__1Pnaj\",\"nameFilterContainer\":\"UsersSearchForm_nameFilterContainer__1DV4X\",\"nameFilterError\":\"UsersSearchForm_nameFilterError__Jlc_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textareaContainer\":\"FormControls_textareaContainer__1V6hV\",\"formControl\":\"FormControls_formControl__1J1_m\",\"error\":\"FormControls_error__3WJnq\"};","module.exports = __webpack_public_path__ + \"static/media/logo192.4fe51017.png\";","import { PhotosType, ProfileType } from '../types/types';\r\nimport { instance, ResponseType } from './api';\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance\r\n      .get<ProfileType>(`profile/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance\r\n      .get<string>(`profile/status/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<ResponseType>(`profile/status`, {\r\n        status: status,\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  saveMainAvatar(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    return instance\r\n      .put<ResponseType<PhotosType>>(`profile/photo`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance\r\n      .put<ResponseType>(`profile`, profile)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n","import { PhotosType } from './../types/types';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport { profileAPI } from '../api/profileApi';\r\nimport { PostType, ProfileType } from '../types/types';\r\nimport { InferActionsType, BaseThunkType } from './redux-store';\r\nimport { ResultCode } from '../api/api';\r\n\r\ntype InitialStateType = typeof initialState;\r\nconst initialState = {\r\n  postsData: [\r\n    // { id: 1, string: 'Ho-ho-ho!', likesCount: 5 },\r\n    // { id: 2, string: \"Cool! What's up?\", likesCount: 7 },\r\n    // { id: 3, string: 'Yo!!', likesCount: 9 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction>;\r\n\r\nexport const profileReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'ADD_POST':\r\n      return {\r\n        ...state,\r\n        postsData: [\r\n          {\r\n            id: state.postsData.length + 1,\r\n            string: action.postMessage,\r\n            likesCount: 0,\r\n          },\r\n          ...state.postsData,\r\n        ],\r\n      };\r\n\r\n    case 'SET_USER_PROFILE':\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n\r\n    case 'DELETE_POST':\r\n      return {\r\n        ...state,\r\n        postsData: state.postsData.filter((post) => post.id !== action.id),\r\n      };\r\n\r\n    case 'SAVE_PHOTO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        profile: {\r\n          ...state.profile,\r\n          photos: action.photos,\r\n        } as ProfileType,\r\n      };\r\n\r\n    case 'SET_STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const actions = {\r\n  newPost: (postMessage: string) => {\r\n    return { type: 'ADD_POST', postMessage } as const;\r\n  },\r\n  deletePost: (id: number) => {\r\n    return { type: 'DELETE_POST', id } as const;\r\n  },\r\n  setStatus: (status: string) => {\r\n    return { type: 'SET_STATUS', status } as const;\r\n  },\r\n  setUserProfile: (profile: ProfileType) => {\r\n    return { type: 'SET_USER_PROFILE', profile } as const;\r\n  },\r\n  saveMainAvatarSuccess: (photos: PhotosType) => {\r\n    return { type: 'SAVE_PHOTO_SUCCESS', photos } as const;\r\n  },\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (\r\n  dispatch\r\n) => {\r\n  const profile = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(profile));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  const status = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const response = await profileAPI.updateStatus(status);\r\n    if (response.resultCode === ResultCode.Success) {\r\n      dispatch(actions.setStatus(status));\r\n    }\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n};\r\n\r\nexport const saveMainAvatar = (file: File): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.saveMainAvatar(file);\r\n  if (response.resultCode === ResultCode.Success) {\r\n    dispatch(actions.saveMainAvatarSuccess(response.data));\r\n  }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const profileData = await profileAPI.saveProfile(profile);\r\n  if (profileData.resultCode === ResultCode.Success) {\r\n    const userId = getState().auth.id;\r\n    if (userId) {\r\n      dispatch(getUserProfile(userId));\r\n    } else {\r\n      throw new Error('userid cant be null');\r\n    }\r\n  } else {\r\n    dispatch(stopSubmit('profile', { _error: profileData.messages[0] }));\r\n    return Promise.reject(profileData.messages[0]);\r\n  }\r\n};\r\n","import { InferActionsType } from './redux-store';\r\n\r\nexport type MessageType = {\r\n  id: number;\r\n  string: string;\r\n};\r\n\r\nexport type DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nconst initialState = {\r\n  messagesData: [\r\n    {\r\n      id: 1,\r\n      string:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut alios omittam, hunc appello, quem ille unum secutus est. Primum cur ista res digna odio est, nisi quod est turpis? Pauca mutat vel plura sane; Nondum autem explanatum satis, erat, quid maxime natura vellet. Duo Reges: constructio interrete. Sic enim censent, oportunitatis esse beate vivere. Nisi autem rerum natura perspecta erit, nullo modo poterimus sensuum iudicia defendere. Satis est ad hoc responsum. '\r\n    },\r\n    { id: 2, string: 'How are you?!' },\r\n    {\r\n      id: 3,\r\n      string:\r\n        'Yo! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut alios omittam, hunc appello, quem ille unum secutus est. Primum cur ista res digna odio est, nisi quod est turpis? Pauca mutat vel plura sane; Nondum autem explanatum satis, erat, quid maxime natura vellet. Duo Reges: constructio interrete. Sic enim censent, oportunitatis esse beate vivere.'\r\n    },\r\n    { id: 4, string: 'LOL' },\r\n    {\r\n      id: 5,\r\n      string: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'\r\n    }\r\n  ] as Array<MessageType>,\r\n  dialogsData: [\r\n    { id: 1, name: 'Dymych' },\r\n    { id: 2, name: 'Alexander' },\r\n    { id: 3, name: 'Vika' },\r\n    { id: 4, name: 'Vasya' },\r\n    { id: 5, name: 'Kotik' },\r\n    { id: 6, name: 'Valeron' }\r\n  ] as Array<DialogType>\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\ntype AcctionsType = InferActionsType<typeof actions>;\r\n\r\nexport const dialogsReducer = (\r\n  state = initialState,\r\n  action: AcctionsType\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SEND_MESSAGE':\r\n      return {\r\n        ...state,\r\n        messagesData: [\r\n          ...state.messagesData,\r\n          {\r\n            id: state.messagesData.length + 1,\r\n            string: action.textMessage\r\n          }\r\n        ]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (textMessage: string) => {\r\n    return { type: 'SEND_MESSAGE', textMessage } as const;\r\n  }\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/icon-404.8b6b7725.png\";","import axios from 'axios';\r\nimport { ENV } from '../constant/env';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: ENV.BASE_URL,\r\n  headers: {\r\n    'API-KEY': ENV.API_KEY,\r\n  },\r\n});\r\n\r\nexport enum ResultCode {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultCode> = {\r\n  data: D;\r\n  messages: Array<string>;\r\n  resultCode: RC;\r\n};\r\n","export const ENV = {\n  API_KEY: process.env.REACT_APP_API_KEY,\n  BASE_URL: process.env.REACT_APP_BASE_URL,\n};\n","export const ROUTES = {\n  CHAT: '/chat',\n  LOGIN: '/login',\n  DIALOGS: '/dialogs',\n  PROFILE: '/profile/:userId?',\n  MY_PROFILE: '/profile',\n  USERS: '/users',\n  NEWS: '/news',\n  MUSIC: '/music',\n  SETTINGS: '/settings',\n  NOT_FOUND: '*',\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_form\":\"Login_login_form__2KjaZ\",\"summaryErrorBlock\":\"Login_summaryErrorBlock__D50hn\",\"summaryErrorBlock__message\":\"Login_summaryErrorBlock__message__yxe98\",\"remember_me\":\"Login_remember_me__1pStn\",\"login\":\"Login_login__3v1XG\",\"login_page\":\"Login_login_page__CCykt\",\"captcha\":\"Login_captcha__3KymT\",\"mb_20\":\"Login_mb_20__3Lec3\"};","import { getAuthUserData } from './authReducer';\r\nimport { InferActionsType, BaseThunkType } from './redux-store';\r\n\r\nexport type InitialStateType = {\r\n  initialized: boolean;\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  initialized: false,\r\n};\r\n\r\ntype ActionsType = InferActionsType<typeof actions>;\r\n\r\nexport const appReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nconst actions = {\r\n  initializedSuccess: () => {\r\n    return { type: 'INITIALIZED_SUCCESS' } as const;\r\n  },\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionsType, void>;\r\n\r\nexport const initApp = (): ThunkType => (dispatch) => {\r\n  let promise = dispatch(getAuthUserData());\r\n  promise.then(() => {\r\n    dispatch(actions.initializedSuccess());\r\n  });\r\n};\r\n","import React, { Suspense } from 'react';\r\n\r\nimport { Preloader } from '../components';\r\n\r\nexport function withSuspense<ComponentProps>(Component: React.ComponentType<ComponentProps>) {\r\n  return (props: ComponentProps) => {\r\n    return (\r\n      <Suspense fallback={<Preloader />}>\r\n        <Component {...props} />\r\n      </Suspense>\r\n    )\r\n  }\r\n}","type InitialStateType = typeof initialState;\r\nconst initialState = {};\r\nexport const sidebarReducer = (\r\n  state = initialState,\r\n  action: any\r\n): InitialStateType => {\r\n  return state;\r\n};\r\n","import {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware,\r\n  compose,\r\n  Action\r\n} from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\n\r\nimport {\r\n  profileReducer,\r\n  dialogsReducer,\r\n  sidebarReducer,\r\n  usersReducer,\r\n  authReducer,\r\n  appReducer,\r\n  chatReducer\r\n} from './index';\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsType<T> = T extends {\r\n  [key: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  chat: chatReducer,\r\n  app: appReducer,\r\n  form: formReducer\r\n});\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch, withRouter } from 'react-router-dom';\r\n\r\nimport {\r\n  Chat,\r\n  News,\r\n  Music,\r\n  Navbar,\r\n  Header,\r\n  Settings,\r\n  LoginPage,\r\n  Preloader,\r\n  UsersPage,\r\n} from './components';\r\nimport { initApp } from './redux/appReducer';\r\nimport { withSuspense } from './hoc/withSuspense';\r\nimport { AppStateType, store } from './redux/redux-store';\r\n\r\nimport { ROUTES } from './constant/routes';\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Content, Footer } = Layout;\r\nconst {\r\n  CHAT,\r\n  NEWS,\r\n  MUSIC,\r\n  LOGIN,\r\n  USERS,\r\n  DIALOGS,\r\n  PROFILE,\r\n  SETTINGS,\r\n  NOT_FOUND,\r\n  MY_PROFILE,\r\n} = ROUTES;\r\n\r\nconst DialogsContainer = React.lazy(\r\n  () => import('./components/Dialogs/DialogsContainer')\r\n);\r\nconst ProfileContainer = React.lazy(\r\n  () => import('./components/Profile/ProfileContainer')\r\n);\r\n\r\nconst SuspendedProfile = withSuspense(ProfileContainer);\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initApp: () => void;\r\n};\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n  catchAllUnhandledErrors = (event: PromiseRejectionEvent) => {\r\n    alert('Some Error in App (unhandledrejection).');\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.initApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\r\n      'unhandledrejection',\r\n      this.catchAllUnhandledErrors\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <Layout style={{ minHeight: '100vh' }}>\r\n        <Header />\r\n        <Content>\r\n          <Layout className='site-layout-background'>\r\n            <Navbar />\r\n            <Content\r\n              style={{\r\n                padding: '20px 80px',\r\n                minHeight: 'calc(100vh - 64px)',\r\n                maxWidth: 1100,\r\n                margin: 'auto'\r\n              }}\r\n            >\r\n              <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={MY_PROFILE} />} />\r\n                <Route path={CHAT} component={Chat} />\r\n                <Route path={DIALOGS} render={() => <SuspendedDialogs />} />\r\n                <Route path={PROFILE} render={() => <SuspendedProfile />} />\r\n                <Route path={USERS} render={() => <UsersPage />} />\r\n                <Route path={LOGIN} render={() => <LoginPage />} />\r\n                <Route path={NEWS} component={News} />\r\n                <Route path={MUSIC} component={Music} />\r\n                <Route path={SETTINGS} component={Settings} />\r\n                <Route\r\n                  path={NOT_FOUND}\r\n                  render={() => <div>404 not found</div>}\r\n                />\r\n              </Switch>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer\r\n          style={{ textAlign: 'center', background: '#001529', color: '#fff' }}\r\n        >\r\n          2021 Created by Vladislav Shevel\r\n        </Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    initialized: state.app.initialized\r\n  };\r\n};\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initApp })\r\n)(App);\r\n\r\nconst MainApplication: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default MainApplication;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApplication from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MainApplication />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","import React from 'react';\r\n\r\nimport { Spin } from 'antd';\r\nimport './spin.css';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return <Spin className=\"spin\" size=\"large\"/>\r\n}\r\n\r\nexport default Preloader;","import React, { useState } from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport '../../../assets/styles/buttons.css';\r\nimport clNames from 'classnames';\r\nimport { Button } from 'antd';\r\n\r\ntype PaginatorPropsType = {\r\n  totalItemsCount: number | null\r\n  pageSize: number\r\n  onPageChanged: (pageNumber: number) => void\r\n  currentPage: number\r\n  portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({ totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 7 }) => {\r\n\r\n  const pagesCount = Math.ceil(totalItemsCount as number / pageSize);\r\n  const pages: Array<number> = [];\r\n  for (let i = 1; i < pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  const portionCount = Math.ceil(pagesCount / portionSize);\r\n  const [portionNumber, setPortionNumber] = useState(1);\r\n  const leftLimit = (portionNumber - 1) * portionSize + 1;\r\n  const rightLimit = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.pages}>\r\n      {\r\n        portionNumber > 1 &&\r\n        <Button\r\n          onClick={() => { setPortionNumber(portionNumber - 1) }}\r\n        >prev</Button>\r\n      }\r\n      {\r\n        pages.filter(filteringPage => filteringPage >= leftLimit && filteringPage <= rightLimit)\r\n          .map(page => {\r\n            return (\r\n              <div key={page} className={styles.page_container}>\r\n                <p\r\n                  className={clNames({ [styles.selected]: currentPage === page }, styles.pagination_item)}\r\n                  onClick={() => { onPageChanged(page) }}\r\n                >\r\n                  {page}\r\n                </p>\r\n              </div>)\r\n          })\r\n      }\r\n      {\r\n        portionCount > portionNumber &&\r\n        <Button\r\n          onClick={() => { setPortionNumber(portionNumber + 1) }}\r\n        >next</Button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Paginator;","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Input } from 'antd';\nimport { reduxForm } from 'redux-form';\n\nimport noava from '../../assets/image/noavatar.jpg';\n\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening\n} from '../../redux/chatReducer';\nimport { AppStateType } from '../../redux/redux-store';\nimport { Preloader } from '../common';\n\ntype ChatMessageType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n};\n\nconst Chat: React.FC = () => {\n  const status = useSelector((state: AppStateType) => state.chat.status);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startMessagesListening());\n    return () => {\n      dispatch(stopMessagesListening());\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      {status === 'ready' ? (\n        <>\n          <Messages />\n          <AddMessagesReduxForm />\n        </>\n      ) : (\n        <Preloader />\n      )}\n    </>\n  );\n};\n\nexport default Chat;\n\nconst Messages: React.FC<{}> = () => {\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\n  const autoScrollRef = useRef<HTMLDivElement>(null);\n  const [isAutoScroll, setIsAutoScroll] = useState(false);\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      autoScrollRef.current?.scrollIntoView({ behavior: 'auto' });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget;\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 30\n    ) {\n      setIsAutoScroll(true);\n    } else {\n      setIsAutoScroll(false);\n    }\n  };\n\n  return (\n    <div style={{ maxHeight: 800, overflowY: 'auto' }} onScroll={scrollHandler}>\n      {messages.map((m, index) => {\n        return <Message message={m} key={index} />;\n      })}\n      <div ref={autoScrollRef}></div>\n    </div>\n  );\n};\n\nconst AddMessagesForm: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = () => {\n    if (!message.trim()) {\n      return;\n    }\n    dispatch(sendMessage(message));\n    setMessage('');\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <Input\n        required\n        placeholder='Enter message..'\n        type='text'\n        size='large'\n        value={message}\n        onChange={(e: {\n          currentTarget: { value: React.SetStateAction<string> };\n        }) => {\n          setMessage(e.currentTarget.value);\n        }}\n      />\n      <Button\n        onClick={handleSubmit}\n        type='default'\n        size='large'\n        style={{ maxHeight: 41 }}\n      >\n        Send\n      </Button>\n    </div>\n  );\n};\n\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(\n  ({ message }) => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          marginTop: 15\n        }}\n      >\n        <div\n          style={{\n            marginRight: '15px'\n          }}\n        >\n          <img\n            style={{ borderRadius: '50%' }}\n            src={message.photo ? message.photo : noava}\n            width={50}\n            alt='avatar'\n          />\n        </div>\n        <div>\n          <b>\n            <span>{message.userName}</span>\n          </b>\n          <p\n            style={{\n              padding: '5px 0',\n              borderRadius: '5px'\n            }}\n          >\n            {message.message}\n          </p>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst AddMessagesReduxForm = reduxForm<any, any>({\n  form: 'chatForm'\n})(AddMessagesForm);\n","import React from 'react';\r\n// import s from './News.module.css';\r\nexport const News: React.FC = () => {\r\n  return (\r\n    <h2>\r\n      News\r\n    </h2>\r\n  )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n// import s from './Music.module.css';\r\n\r\nconst Music: React.FC = () => {\r\n  return (\r\n    <h2>\r\n      Music\r\n    </h2>\r\n  )\r\n}\r\n\r\nexport default Music;","import { createSelector } from 'reselect';\r\nimport { AppStateType } from './redux-store';\r\n\r\nconst Users = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const getUsers = createSelector(Users, (users) => {\r\n  // dependency from results of Users -> users\r\n  return users.filter((u) => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { UserType } from '../../types/types';\r\nimport noavatar from '../../assets/image/noavatar.jpg';\r\n\r\nimport styles from './Users.module.css';\r\nimport '../../assets/styles/buttons.css';\r\n\r\ntype PropsType = {\r\n  user: UserType;\r\n  unfollow: (userId: number) => void;\r\n  follow: (userId: number) => void;\r\n  followingInProgress: Array<number>;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n  user, \r\n  follow,\r\n  unfollow,\r\n  followingInProgress\r\n}) => {\r\n  return (\r\n    <div className={styles.user}>\r\n      <span className={styles.user_avaBlock}>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <NavLink to={`/profile/${user.id}`}>\r\n            <img\r\n              className={styles.avatar}\r\n              src={\r\n                user && user.photos && user.photos.small !== null\r\n                  ? user.photos.small\r\n                  : noavatar\r\n              }\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              className={`${styles.unfollow} btn`}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}\r\n            >\r\n              UnFollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              className={`${styles.follow} btn`}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span className={styles.user_info}>\r\n        <span className={styles.person}>\r\n          <div className={styles.name}>{user.name}</div>\r\n          <div className={styles.status}>{user.status}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nimport { FilterType } from '../../../redux/usersReducer';\r\nimport { getUsersFilter } from '../../../redux/usersSelectors';\r\n\r\nimport s from './UsersSearchForm.module.css';\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo(\r\n  ({ onFilterChanged }) => {\r\n    const filter = useSelector(getUsersFilter);\r\n    const submit = (\r\n      values: FormType,\r\n      { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n    ) => {\r\n      const filter: FilterType = {\r\n        term: values.term.trim(),\r\n        friend:\r\n          values.friend === 'null'\r\n            ? null\r\n            : values.friend === 'true'\r\n            ? true\r\n            : false\r\n      };\r\n      onFilterChanged(filter);\r\n      setSubmitting(false);\r\n    };\r\n\r\n    return (\r\n      <Formik\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType\r\n        }}\r\n        enableReinitialize\r\n        onSubmit={submit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className={s.formFilter}>\r\n            <Field className={s.filterSelect} name='friend' as='select'>\r\n              <option value='null'>All</option>\r\n              <option value='true'>Followed</option>\r\n              <option value='false'>Unfollowed</option>\r\n            </Field>\r\n            <Field className={s.nameFilter} type='text' name='term' />\r\n            <Button htmlType='submit' disabled={isSubmitting}>\r\n              Search <SearchOutlined />\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    );\r\n  }\r\n);\r\n\r\nexport default UsersSearchForm;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as queryString from 'querystring';\r\n\r\nimport {\r\n  FilterType,\r\n  follow,\r\n  getUsersThunk,\r\n  unfollow\r\n} from '../../redux/usersReducer';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter\r\n} from '../../redux/usersSelectors';\r\nimport User from './User';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport UsersSearchForm from './UsersSearchForm/UsersSearchForm';\r\n\r\nimport notFound from '../../assets/image/icon-404.png';\r\nimport styles from './Users.module.css';\r\nimport '../../assets/styles/buttons.css';\r\n\r\ntype UsersPropsType = {};\r\n\r\nexport const Users: React.FC<UsersPropsType> = () => {\r\n  const users = useSelector(getUsers);\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as {\r\n      term: string;\r\n      page: string;\r\n      friend: string;\r\n    };\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n    if (parsed.page) {\r\n      actualPage = Number(parsed.page);\r\n    }\r\n    if (parsed.term) {\r\n      actualFilter = { ...actualFilter, term: parsed.term as string };\r\n    }\r\n    if (parsed.friend) {\r\n      actualFilter = {\r\n        ...actualFilter,\r\n        friend:\r\n          parsed.friend === 'null'\r\n            ? null\r\n            : parsed.friend === 'true'\r\n            ? true\r\n            : false\r\n      };\r\n    }\r\n    dispatch(getUsersThunk(actualPage, pageSize, actualFilter));\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPage, dispatch, history.location.search, pageSize]);\r\n\r\n  useEffect(() => {\r\n    history.push({\r\n      pathname: '/users',\r\n      search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n    });\r\n  }, [filter, currentPage, history]);\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(getUsersThunk(pageNumber, pageSize, filter));\r\n  };\r\n\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(getUsersThunk(1, pageSize, filter));\r\n  };\r\n\r\n  const subscribe = (userId: number) => {\r\n    dispatch(follow(userId));\r\n  };\r\n\r\n  const unsubscribe = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.users}>\r\n      <div style={{ marginBottom: 15 }}>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      </div>\r\n      {users.length ? (\r\n        users.map((user) => {\r\n          return (\r\n            <User\r\n              key={user.id}\r\n              user={user}\r\n              follow={subscribe}\r\n              unfollow={unsubscribe}\r\n              followingInProgress={followingInProgress}\r\n            />\r\n          );\r\n        })\r\n      ) : (\r\n        <div style={{ textAlign: 'center', fontSize: 24 }}>\r\n          <p>\r\n            <b>Not found users</b>\r\n          </p>\r\n          <img src={notFound} width='400' alt='not found' />\r\n        </div>\r\n      )}\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Users } from './Users';\r\nimport { Preloader } from '../index';\r\nimport { getIsFetching } from '../../redux/usersSelectors';\r\n\r\n\r\ntype UserPagePropsType = {}\r\n\r\nconst UsersPage: React.FC<UserPagePropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  return (\r\n    <>\r\n      { isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UsersPage;","import { AppStateType } from './redux-store';\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth;\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n  return state.auth.login;\r\n};\r\nexport const getEmail = (state: AppStateType) => {\r\n  return state.auth.email;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Button, Layout, Col, Row, Avatar } from 'antd';\r\n\r\nimport Logo from './logo192.png';\r\nimport s from './Header.module.css';\r\nimport { logout } from '../../redux/authReducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsAuth, getLogin } from '../../redux/authSelectors';\r\n\r\nimport '../../assets/styles/buttons.css';\r\n\r\ntype PropsType = {};\r\n\r\nconst Header: React.FC<PropsType> = () => {\r\n  const { Header } = Layout;\r\n  const isAuth = useSelector(getIsAuth);\r\n  const login = useSelector(getLogin);\r\n  const dispatch = useDispatch();\r\n  const logoutCallback = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <Header>\r\n      <Row justify='space-between' align='middle'>\r\n        {isAuth ? (\r\n          <>\r\n            <Col>\r\n              <img className={s.logo} src={Logo} alt='logo' />\r\n            </Col>\r\n            <Col flex='align(-self): center'>\r\n              <div className={s.login_block}>\r\n                <div className={s.login_info}>\r\n                  <Avatar className={s.login_name}>{login?.slice(0, 1)}</Avatar>\r\n                </div>\r\n                <Button onClick={logoutCallback}>\r\n                  Logout\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Col>\r\n              <img className={s.logo} src={Logo} alt='logo' />\r\n            </Col>\r\n            <Col>\r\n              <NavLink className={s.login} to='/login'>\r\n                <Button type='primary'>Login</Button>\r\n              </NavLink>\r\n            </Col>\r\n          </>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  SmileOutlined,\r\n  GlobalOutlined,\r\n  WechatOutlined,\r\n  CommentOutlined,\r\n  SettingOutlined,\r\n  CustomerServiceOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { ROUTES } from '../../constant/routes';\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <Sider\r\n      className='site-layout-background'\r\n      width={200}\r\n      style={{ background: '#fff', borderRadius: '5px' }}\r\n    >\r\n      <Menu mode='inline' style={{ height: '100%', borderRadius: '5px' }}>\r\n        <Menu.Item key='1' icon={<SmileOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.MY_PROFILE}>Me</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='2' icon={<UserOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.USERS}>People</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='3' icon={<CommentOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.DIALOGS}>Messages</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='4' icon={<CustomerServiceOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.MUSIC}>Music</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='5' icon={<GlobalOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.NEWS}>News</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='6' icon={<WechatOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.CHAT}>Chat</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='7' icon={<SettingOutlined style={{ fontSize: '20px'}}/>}>\r\n          <Link to={ROUTES.SETTINGS}>Settings</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n// import s from './Settings.module.css';\r\n\r\nconst Settings: React.FC = () => {\r\n  return (\r\n    <h2>\r\n      Settings\r\n    </h2>\r\n  )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport classnames from 'classnames';\r\nimport { login } from '../../redux/authReducer';\r\nimport { required } from '../../utils/validators';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport {\r\n  Input,\r\n  createField,\r\n  GetStringKeys\r\n} from '../common/FormControls/FormControls';\r\n\r\nimport styles from './Login.module.css';\r\nimport '../../assets/styles/buttons.css';\r\n\r\ntype LoginFormOwnPropsType = {\r\n  captchaURL: string | null;\r\n};\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormDataType, LoginFormOwnPropsType> &\r\n    LoginFormOwnPropsType\r\n> = ({ handleSubmit, error, captchaURL }) => {\r\n  return (\r\n    <form className={styles.login_form} onSubmit={handleSubmit}>\r\n      <div className={classnames(styles.login_input, styles.mb_20)}>\r\n        {createField<LoginFormDataTypeKeys>(\r\n          'Email',\r\n          'email',\r\n          [required],\r\n          Input,\r\n          { type: 'text' }\r\n        )}\r\n      </div>\r\n      <div className={classnames(styles.login_input, styles.mb_20)}>\r\n        {createField<LoginFormDataTypeKeys>(\r\n          'Password',\r\n          'password',\r\n          [required],\r\n          Input,\r\n          { type: 'password' }\r\n        )}\r\n      </div>\r\n      <div className={classnames(styles.remember_me, styles.mb_20)}>\r\n        <span>Remember me</span>\r\n        {createField<LoginFormDataTypeKeys>(\r\n          undefined,\r\n          'rememberMe',\r\n          [],\r\n          Input,\r\n          { type: 'checkbox' }\r\n        )}\r\n      </div>\r\n      {captchaURL && (\r\n        <img className={styles.captcha} src={captchaURL} alt='captcha' />\r\n      )}\r\n      {captchaURL &&\r\n        createField<LoginFormDataTypeKeys>(\r\n          'Symbols from captcha',\r\n          'captcha',\r\n          [required],\r\n          Input,\r\n          { type: 'text' }\r\n        )}\r\n      <div className={styles.btn}>\r\n        <Button type='primary' onClick={handleSubmit}>\r\n          Sign In\r\n        </Button>\r\n      </div>\r\n      {error && (\r\n        <div className={styles.summaryErrorBlock}>\r\n          <span className={styles.summaryErrorBlock__message}>{error}</span>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormOwnPropsType>({\r\n  form: 'login'\r\n})(LoginForm);\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const captchaURL = useSelector(\r\n    (state: AppStateType) => state.auth.captchaURL\r\n  );\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    dispatch(\r\n      login(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      )\r\n    );\r\n  };\r\n  if (isAuth) {\r\n    return <Redirect to='/profile' />;\r\n  }\r\n  return (\r\n    <div className={styles.login_page}>\r\n      <p className={styles.login}>Sign In</p>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type LoginFormDataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\n\r\ntype LoginFormDataTypeKeys = GetStringKeys<LoginFormDataType>;\r\n\r\nexport default LoginPage;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__3i9aU\",\"users\":\"Users_users__2bQpg\",\"user\":\"Users_user__2UjH8\",\"user_info\":\"Users_user_info__3at2x\",\"user_avaBlock\":\"Users_user_avaBlock__MJte4\",\"location\":\"Users_location__2duEj\",\"person\":\"Users_person__25JqS\",\"follow\":\"Users_follow__1r_32\",\"unfollow\":\"Users_unfollow__1kjq7\",\"name\":\"Users_name__Gt7rs\",\"status\":\"Users_status__2CIJi\"};","import React from 'react';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\n\r\nimport { FieldValidatorType } from '../../../utils/validators';\r\n\r\nimport styles from './FormControls.module.css';\r\n\r\ntype FormControlsPropsType = {\r\n  meta: WrappedFieldMetaProps;\r\n};\r\n\r\nexport const FormControl: React.FC<FormControlsPropsType> = ({\r\n  meta: { touched, error },\r\n  children\r\n}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div\r\n      className={`${styles.textareaContainer} ${styles.formControl} ${\r\n        hasError ? styles.error : ''\r\n      }`}\r\n    >\r\n      {children}\r\n      <div>{hasError && <span>{error}</span>}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  { ...props }\r\n) {\r\n  return (\r\n    <Field\r\n      name={name}\r\n      placeholder={placeholder}\r\n      component={component}\r\n      validate={validators}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","import {\r\n  instance,\r\n  ResponseType,\r\n  ResultCode,\r\n  ResultCodeForCaptcha,\r\n} from './api';\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<ResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((response) => response.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe = false,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance\r\n      .post<\r\n        ResponseType<LoginResponseDataType, ResultCode | ResultCodeForCaptcha>\r\n      >(`auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha,\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  logout() {\r\n    return instance\r\n      .delete<ResponseType<{}>>(`auth/login`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\ntype LoginResponseDataType = {\r\n  userId: number;\r\n};\r\n","import { instance } from './api';\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlType>(`security/get-captcha-url`)\r\n      .then((response) => response.data.url);\r\n  },\r\n};\r\ntype GetCaptchaUrlType = {\r\n  url: string;\r\n};\r\n","import { ResultCode, ResultCodeForCaptcha } from './../api/api';\r\nimport { authAPI } from '../api/authApi';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport { InferActionsType, BaseThunkType } from './redux-store';\r\nimport { securityAPI } from '../api/securityApi';\r\n\r\ntype InitialStateType = {\r\n  id: null | number;\r\n  email: null | string;\r\n  login: null | string;\r\n  isFetching: boolean;\r\n  isAuth: boolean;\r\n  captchaURL: null | string;\r\n};\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction>;\r\n\r\nconst initialState: InitialStateType = {\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  isFetching: false,\r\n  isAuth: false,\r\n  captchaURL: null\r\n};\r\n\r\nexport const authReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n    case 'SET_CAPTCHA':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setAuthUserData: (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) => {\r\n    return {\r\n      type: 'SET_USER_DATA',\r\n      payload: { id, email, login, isAuth }\r\n    } as const;\r\n  },\r\n  setCaptcha: (captchaURL: string | null) => {\r\n    return { type: 'SET_CAPTCHA', payload: { captchaURL } } as const;\r\n  }\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const meData = await authAPI.me();\r\n  if (meData.resultCode === ResultCode.Success) {\r\n    let { id, email, login } = meData.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login =\r\n  (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ): ThunkType =>\r\n  async (dispatch) => {\r\n    const loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === ResultCode.Success) {\r\n      dispatch(getAuthUserData());\r\n      dispatch(actions.setCaptcha(null));\r\n    } else {\r\n      if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n        dispatch(getCaptchaUrl());\r\n      }\r\n      const message =\r\n        loginData.messages.length > 0 ? loginData.messages[0] : 'some error';\r\n      dispatch(stopSubmit('login', { _error: message }));\r\n    }\r\n  };\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const captchaURL = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.setCaptcha(captchaURL));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const logoutData = await authAPI.logout();\r\n  if (logoutData.resultCode === ResultCode.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n","import { UserType } from '../types/types';\r\nimport { instance, ResponseType } from './api';\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage: number = 1,\r\n    pageSize: number = 7,\r\n    term: string = '',\r\n    friend: null | boolean = null\r\n  ) {\r\n    return instance\r\n      .get<GetUsersType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? '' : `&friend=${friend}`)\r\n      )\r\n      .then((response) => response.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance\r\n      .post<ResponseType>(`follow/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance\r\n      .delete<ResponseType>(`follow/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\nexport type GetUsersType = {\r\n  items: Array<UserType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: any,\r\n  objPropName: any,\r\n  newObjProp: any\r\n) => {\r\n  return items.map((user: any) => {\r\n    if (user[objPropName] === itemId) {\r\n      return {\r\n        ...user,\r\n        ...newObjProp,\r\n      };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n","import { UserType } from '../types/types';\r\nimport { usersAPI } from '../api/userApi';\r\nimport { updateObjectInArray } from '../utils/objectsHelper';\r\nimport { InferActionsType, BaseThunkType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType, ResultCode } from '../api/api';\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  totalUsersCount: null as number | null,\r\n  pageSize: 7,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>, // array of usersId\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\ntype ActionsTypes = InferActionsType<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nexport const usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userID, 'id', {\r\n          followed: true,\r\n        }),\r\n      };\r\n\r\n    case 'UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userID, 'id', {\r\n          followed: false,\r\n        }),\r\n      };\r\n    case 'SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case 'TOGGLE_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS':\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case 'SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: [...action.users],\r\n      };\r\n    case 'SET_FILTER':\r\n      return {\r\n        ...state,\r\n        filter: action.payload,\r\n      };\r\n    case 'SET_USERS_TOTAL_COUNT':\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getUsersThunk = (\r\n  currentPage: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleIsFetching(true));\r\n  dispatch(actions.setCurrentPage(currentPage));\r\n  dispatch(actions.setFilter(filter));\r\n\r\n  const data = await usersAPI.getUsers(\r\n    currentPage,\r\n    pageSize,\r\n    filter.term,\r\n    filter.friend\r\n  );\r\n  dispatch(actions.toggleIsFetching(false));\r\n\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setUsersTotalCount(data.totalCount));\r\n};\r\nconst followUnfollowFlow = async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  userId: number,\r\n  apiMethod: (userId: number) => Promise<ResponseType>,\r\n  actionCreator: (userId: number) => ActionsTypes\r\n) => {\r\n  dispatch(actions.toggleIsFollowing(true, userId));\r\n  const response = await apiMethod(userId);\r\n  if (response.resultCode === ResultCode.Success) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(actions.toggleIsFollowing(false, userId));\r\n};\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n  followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess);\r\n};\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n  followUnfollowFlow(\r\n    dispatch,\r\n    userId,\r\n    usersAPI.unfollow,\r\n    actions.unfollowSuccess\r\n  );\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userID: number) => {\r\n    return { type: 'FOLLOW', userID } as const;\r\n  },\r\n  unfollowSuccess: (userID: number) => {\r\n    return { type: 'UNFOLLOW', userID } as const;\r\n  },\r\n  setUsers: (users: Array<UserType>) => {\r\n    return { type: 'SET_USERS', users } as const;\r\n  },\r\n  setCurrentPage: (currentPage: number) => {\r\n    return { type: 'SET_CURRENT_PAGE', currentPage } as const;\r\n  },\r\n  setFilter: (filter: FilterType) => {\r\n    return { type: 'SET_FILTER', payload: { ...filter } } as const;\r\n  },\r\n  setUsersTotalCount: (totalUsersCount: number) => {\r\n    return { type: 'SET_USERS_TOTAL_COUNT', totalUsersCount } as const;\r\n  },\r\n  toggleIsFetching: (isFetching: boolean) => {\r\n    return { type: 'TOGGLE_IS_FETCHING', isFetching } as const;\r\n  },\r\n  toggleIsFollowing: (isFetching: boolean, userId: number) => {\r\n    return {\r\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      isFetching,\r\n      userId,\r\n    } as const;\r\n  },\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2dUNX\",\"logo\":\"Header_logo__3Z-If\",\"login\":\"Header_login__2BDq1\",\"login_block\":\"Header_login_block__2AF1w\",\"login_info\":\"Header_login_info__2eddo\",\"login_name\":\"Header_login_name__3G794\",\"login_email\":\"Header_login_email__2Zu2V\"};","const subscribers = {\n  messagesRecieved: [] as MessagesRecievedSubscriberType[],\n  statusChanged: [] as StatusChangedSubscriberType[]\n};\n\nexport type ChatMessageType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n};\n\nexport type StatusType = 'pending' | 'ready' | 'error';\n\ntype EventsName = 'messagesRecieved' | 'statusChanged';\n\nlet socket: WebSocket;\n\ntype MessagesRecievedSubscriberType = (messages: ChatMessageType[]) => void;\ntype StatusChangedSubscriberType = (status: StatusType) => void;\n\nconst closeHandler = () => {\n  console.log('ws has down!');\n  notifyAboutStatus('pending');\n  setTimeout(createWsChannel, 3000);\n};\n\nconst cleanUp = () => {\n  socket?.removeEventListener('close', closeHandler);\n  socket?.removeEventListener('message', messageHandler);\n  socket?.removeEventListener('open', openHandler);\n  socket?.removeEventListener('error', errorHandler);\n};\n\nconst notifyAboutStatus = (status: StatusType) => {\n  subscribers.statusChanged.forEach((s) => s(status));\n};\n\nfunction createWsChannel() {\n  cleanUp();\n  socket?.close();\n  socket = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  );\n  notifyAboutStatus('pending');\n  socket.addEventListener('close', closeHandler);\n  socket.addEventListener('message', messageHandler);\n  socket.addEventListener('open', openHandler);\n  socket.addEventListener('error', errorHandler);\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data);\n  subscribers?.messagesRecieved.forEach((s) => s(newMessages));\n};\n\nconst openHandler = () => {\n  notifyAboutStatus('ready');\n};\n\nconst errorHandler = () => {\n  notifyAboutStatus('error');\n};\n\nexport const chat_api = {\n  subscribe: (\n    eventName: EventsName,\n    callback: MessagesRecievedSubscriberType | StatusChangedSubscriberType\n  ) => {\n    // @ts-ignore\n    subscribers[eventName].push(callback);\n    return () => {\n      // @ts-ignore\n      subscribers[eventName] = subscribers[eventName].filter(\n        // @ts-ignore\n        (s) => s !== callback\n      );\n    };\n  },\n  unsubscribe: (\n    eventName: EventsName,\n    callback: MessagesRecievedSubscriberType | StatusChangedSubscriberType\n  ) => {\n    // @ts-ignore\n    subscribers[eventName] = subscribers[eventName].filter(\n      // @ts-ignore\n      (s) => s !== callback\n    );\n  },\n  send: (message: string) => {\n    socket?.send(message);\n  },\n  start: () => {\n    createWsChannel();\n  },\n  stop: () => {\n    subscribers.messagesRecieved = [];\n    subscribers.statusChanged = [];\n    cleanUp();\n    socket?.close();\n  }\n};\n","import { InferActionsType, BaseThunkType } from './redux-store';\r\nimport { ChatMessageType, chat_api, StatusType } from '../api/chat-api';\r\nimport { Dispatch } from 'redux';\r\n\r\ntype InitialStateType = {\r\n  messages: ChatMessageType[];\r\n  status: StatusType;\r\n};\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionTypes>;\r\n\r\nconst initialState: InitialStateType = {\r\n  messages: [],\r\n  status: 'pending'\r\n};\r\n\r\nexport const chatReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'MESSAGES_RECIEVED':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...action.payload]\r\n      };\r\n    case 'ERASE_OLD_MESSAGES':\r\n      return {\r\n        ...state,\r\n        messages: []\r\n      };\r\n    case 'STATUS_CHANGED':\r\n      return {\r\n        ...state,\r\n        status: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  messagesRecieved: (messages: ChatMessageType[]) => {\r\n    return {\r\n      type: 'MESSAGES_RECIEVED',\r\n      payload: messages\r\n    } as const;\r\n  },\r\n  statusChanged: (status: StatusType) => {\r\n    return {\r\n      type: 'STATUS_CHANGED',\r\n      payload: status\r\n    } as const;\r\n  },\r\n  eraseOldMessages: () => {\r\n    return {\r\n      type: 'ERASE_OLD_MESSAGES',\r\n    } as const;\r\n  }\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null;\r\n\r\nconst newMassageHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_newMessageHandler == null) {\r\n    _newMessageHandler = (messages: ChatMessageType[]) => {\r\n      dispatch(actions.messagesRecieved(messages));\r\n    };\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_statusChangedHandler == null) {\r\n    _statusChangedHandler = (status: StatusType) => {\r\n      dispatch(actions.statusChanged(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chat_api.start();\r\n  chat_api.subscribe('messagesRecieved', newMassageHandlerCreator(dispatch));\r\n  chat_api.subscribe('statusChanged', statusChangedHandlerCreator(dispatch));\r\n};\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chat_api.unsubscribe('messagesRecieved', newMassageHandlerCreator(dispatch));\r\n  chat_api.unsubscribe('statusChanged', statusChangedHandlerCreator(dispatch));\r\n  chat_api.stop();\r\n  dispatch(actions.eraseOldMessages());\r\n};\r\n\r\nexport const sendMessage =\r\n  (message: string): ThunkType =>\r\n  async () => {\r\n    chat_api.send(message);\r\n  };\r\n"],"sourceRoot":""}
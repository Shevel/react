{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/icon/add.png","assets/icon/edit.svg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileStatus/ProfileStatusHooks.tsx","components/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","Post","className","styles","post","src","alt","message","likesCount","maxLengthFiled300","maxLengthCreator","PostReduxForm","reduxForm","form","handleSubmit","newMessageForm","onSubmit","createField","Textarea","type","onClick","MyPostsMemorized","React","memo","postElements","postsData","map","key","length","id","string","posts","header","postData","addPost","newPost","MyPostsContainer","profilePage","actions","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","isOwner","autoFocus","value","onChange","event","currentTarget","onBlur","updateStatus","ProfileDataReduxForm","profile","error","Input","Object","keys","contacts","ProfileInfo","saveMainAvatar","saveProfile","s","ava_block","ava_image","avatar","photos","large","small","defaultAvatar","ava_uploader","upload_ava","e","target","files","ava_label","title","htmlFor","addIcon","height","info","full_name","fullName","formData","then","initialValues","activateEditMode","Preloader","ProfileData","profile_data","shape","activate_edit_btn","width","editIcon","about_me","aboutMe","lookingForAJobDescription","readOnly","checked","lookingForAJob","contactTitle","contactValue","Contact","contact","contact_title","contact_value","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","compose","withRouter"],"mappings":"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","file":"static/js/3.17740515.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) { return <Redirect to=\"/login\" />; }\r\n    return <Component {...restProps as WCP} />;\r\n  }\r\n  const ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__7q1fQ\",\"newMessageForm\":\"MyPosts_newMessageForm__1ObLb\",\"btn\":\"MyPosts_btn__1b897\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Profile_img__3SLJJ\",\"descriptionBlock\":\"Profile_descriptionBlock__nKAmJ\",\"profile\":\"Profile_profile__2fFmz\",\"avatar\":\"Profile_avatar__ViEDM\",\"info\":\"Profile_info__2L1jS\",\"full_name\":\"Profile_full_name__AP5Ay\",\"about_me\":\"Profile_about_me__1Ez-V\",\"status\":\"Profile_status__39XqI\",\"ava_block\":\"Profile_ava_block__c9nRK\",\"upload_ava\":\"Profile_upload_ava__3ERlo\",\"ava_uploader\":\"Profile_ava_uploader__2qwat\",\"ava_label\":\"Profile_ava_label__3sCNw\",\"contact_title\":\"Profile_contact_title__3zmfu\",\"contact_value\":\"Profile_contact_value__2xrLe\",\"ava_image\":\"Profile_ava_image__aN_QQ\",\"profile_data\":\"Profile_profile_data__1BCSN\",\"activate_edit_btn\":\"Profile_activate_edit_btn__2XmCi\",\"contact\":\"Profile_contact__foBOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__Xby-l\"};","module.exports = __webpack_public_path__ + \"static/media/add.4cf308a4.png\";","module.exports = __webpack_public_path__ + \"static/media/edit.70454fa7.svg\";","import React from 'react';\r\nimport styles from './Post.module.css';\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={styles.post}>\r\n      <img src='https://avatars.mds.yandex.net/get-pdb/1352825/a5f8fbd7-515e-49f8-81d6-be55a2daac92/s600' alt='post' />\r\n      {props.message}\r\n      <br />\r\n      <span>Like {props.likesCount}</span>\r\n    </div>\r\n  )\r\n}","import { Button } from 'antd';\r\nimport React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator } from '../../../../utils/validators';\r\nimport { createField, GetStringKeys, Textarea } from '../../../common/FormControls/FormControls';\r\nimport styles from '../MyPosts.module.css';\r\n\r\nconst maxLengthFiled300 = maxLengthCreator(300);\r\n\r\ntype PropsType = {\r\n}\r\nconst PostForm: React.FC<InjectedFormProps<PostFormDataType, PropsType> & PropsType> = (props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form className={styles.newMessageForm} onSubmit={handleSubmit}>\r\n      {createField<PostFormDataTypeKeys>('Enter new post text..', 'newPost', [maxLengthFiled300], Textarea, { type: 'text' })}\r\n      <Button type='primary' onClick={handleSubmit}>Add post</Button>\r\n    </form>\r\n  );\r\n};\r\nexport type PostFormDataType = {\r\n  newPost: string\r\n}\r\ntype PostFormDataTypeKeys = GetStringKeys<PostFormDataType>;\r\n\r\nconst PostReduxForm = reduxForm<PostFormDataType, PropsType>({ form: \"posts\" })(PostForm);\r\n\r\nexport default PostReduxForm;","import React from \"react\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport '../../../assets/styles/buttons.css';\r\nimport { Post } from \"./Post/Post\";\r\nimport PostReduxFrom, { PostFormDataType } from './AddPostForm/AddPostForm';\r\nimport { PostType } from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n  postsData: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchType = {\r\n  addPost: (newPost: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n  const postElements = props.postsData.map((post) => (\r\n    <Post\r\n      key={props.postsData.length - post.id}\r\n      message={post.string}\r\n      likesCount={post.likesCount}\r\n    />\r\n  ));\r\n\r\n  const onSubmitPost = (postData: PostFormDataType) => {\r\n    props.addPost(postData.newPost);\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={styles.posts}>\r\n      <h3 className={styles.header}>My Posts</h3>\r\n      <PostReduxFrom onSubmit={onSubmitPost} />\r\n      {postElements}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n","import MyPostsMemorized, { MapDispatchType, MapPropsType } from \"./MyPosts\";\r\nimport { actions } from \"../../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapPropsType => {\r\n  return {\r\n    postsData: state.profilePage.postsData,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer: React.ComponentType = connect<MapPropsType, MapDispatchType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  { addPost: actions.newPost }\r\n)(MyPostsMemorized);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"../Profile.module.css\";\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  isOwner: boolean\r\n  updateStatus: (status: string) => void\r\n\r\n}\r\nexport const ProfileStatusHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    props.isOwner && setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(event.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!editMode && (\r\n        <div>\r\n          <span className={styles.status} onClick={activateEditMode}>\r\n            {props.status || \"Set status..\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus\r\n            value={status}\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, GetStringKeys, Input, Textarea } from '../../common/FormControls/FormControls';\r\nimport '../../../assets/styles/buttons.css';\r\nimport { ProfileType } from '../../../types/types';\r\nimport { Button } from 'antd';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div ><b>Full Name:</b>{createField<ProfileTypeKeys>('Full Name', 'fullName', [], Input, { type: 'text' })}</div>\r\n      <div ><b>Looking for a job:</b>{createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, { type: 'checkbox' })}</div>\r\n      <div ><b>My skills:</b>{createField<ProfileTypeKeys>('My skills', 'lookingForAJobDescription', [], Textarea, { type: 'text' })}</div>\r\n      <div ><b>About me:</b>{createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea, { type: 'text' })}</div>\r\n      {error && <div>\r\n        <span>{error}</span>\r\n      </div>}\r\n      {\r\n        Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <div key={key}>\r\n              <b>{key}</b>{createField(key, 'contacts.' + key, [], Input, { type: 'text' })}\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      <div><Button type='primary' onClick={handleSubmit}>Save</Button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({ form: \"profile\" })(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import React, { useState } from \"react\";\r\nimport defaultAvatar from \"../../../assets/image/noavatar.jpg\";\r\nimport s from \"../Profile.module.css\";\r\nimport \"../../../assets/styles/buttons.css\";\r\nimport { Preloader } from \"../../common/Preloader/Preloader\";\r\nimport { ProfileStatusHooks } from \"../ProfileStatus/ProfileStatusHooks\";\r\nimport ProfileDataReduxForm from \"../ProfileDataForm/ProfileDataForm\";\r\nimport addIcon from \"../../../assets/icon/add.png\";\r\nimport editIcon from \"../../../assets/icon/edit.svg\";\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\nimport { Button } from \"antd\";\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  saveMainAvatar: (file: File) => void\r\n  saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nexport const ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  isOwner,\r\n  updateStatus,\r\n  saveMainAvatar,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const onAvaSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      saveMainAvatar(e.target.files[0]);\r\n    }\r\n  };\r\n  const onSubmit = (formData: ProfileType) => {\r\n    // todo: remove then from this place\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <>\r\n      <div className={s.profile}>\r\n        <div className={s.ava_block}>\r\n          <div className={s.ava_image}>\r\n            <img\r\n              className={s.avatar}\r\n              src={\r\n                profile.photos?.large || profile.photos?.small || defaultAvatar\r\n              }\r\n              alt=\"ava\"\r\n            />\r\n            {isOwner && (\r\n              <div className={s.ava_uploader}>\r\n                <input\r\n                  className={s.upload_ava}\r\n                  onChange={onAvaSelected}\r\n                  type=\"file\"\r\n                  id=\"file\"\r\n                />\r\n                <label\r\n                  className={s.ava_label}\r\n                  title=\"Change and upload avatar\"\r\n                  htmlFor=\"file\"\r\n                >\r\n                  Change avatar <img src={addIcon} alt=\"addIcon\" height=\"20\" />\r\n                </label>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={s.info}>\r\n          <div className={s.full_name}>{profile.fullName}</div>\r\n          <ProfileStatusHooks\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n            isOwner={isOwner}\r\n          />\r\n          {editMode ? (\r\n            <ProfileDataReduxForm\r\n              onSubmit={onSubmit}\r\n              initialValues={profile}\r\n              profile={profile}\r\n            />\r\n          ) : (\r\n              <ProfileData\r\n                activateEditMode={() => {\r\n                  setEditMode(true);\r\n                }}\r\n                profile={profile}\r\n                isOwner={isOwner}\r\n              />\r\n            )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  activateEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, activateEditMode }) => {\r\n  return (\r\n    <div className={s.profile_data}>\r\n      {isOwner && (\r\n        <Button\r\n          shape=\"round\"\r\n          className={`${s.activate_edit_btn}`}\r\n          onClick={activateEditMode}\r\n        >\r\n          <img width={20} src={editIcon} alt=\"editIcon\" />\r\n        </Button>\r\n      )}\r\n      <div className={s.about_me}>\r\n        <b>About me:</b>\r\n        {` ${profile.aboutMe}`}\r\n      </div>\r\n      <div className={s.about_me}>\r\n        <b>My skills:</b>\r\n        {` ${profile.lookingForAJobDescription}`}\r\n      </div>\r\n      <label className={s.about_me} htmlFor=\"lookingForaJob\">\r\n        <b>Looking for a Job</b>\r\n      </label>\r\n      <input\r\n        id=\"lookingForaJob\"\r\n        type=\"checkbox\"\r\n        readOnly\r\n        checked={profile.lookingForAJob}\r\n      />\r\n      {Object.keys(profile.contacts).map((key) => {\r\n        return (\r\n          <Contact\r\n            key={key}\r\n            contactTitle={key}\r\n            contactValue={profile.contacts[key as keyof ContactsType]}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <div className={s.contact_title}>{`My ${contactTitle}:`}</div>\r\n      <div className={s.contact_value}>{` ${contactValue || \"\"}`}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  isOwner: boolean\r\n  updateStatus: (status: string) => void\r\n  saveMainAvatar: (file: File) => void\r\n  saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nexport const Profile: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  saveMainAvatar,\r\n  saveProfile\r\n}) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        saveMainAvatar={saveMainAvatar}\r\n        saveProfile={saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Profile } from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  saveMainAvatar,\r\n  saveProfile\r\n} from \"../../redux/profileReducer\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype MapDispatchPtopsType = {\r\n  getUserProfile: (userId: number) => Promise<void>\r\n  getStatus: (userId: number) => Promise<void>\r\n  updateStatus: (status: string) => Promise<void>\r\n  saveMainAvatar: (file: File) => Promise<void>\r\n  saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\ntype PropsType = MapPropsType & MapDispatchPtopsType & RouteComponentProps<PathParamsType>;\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) { this.props.history.push('/login'); }\r\n    }\r\n    this.props.getUserProfile(userId as number);\r\n    this.props.getStatus(userId as number);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        saveMainAvatar={this.props.saveMainAvatar}\r\n      />\r\n    );\r\n  }\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  authorizedUserId: state.auth.id,\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    saveMainAvatar,\r\n    saveProfile,\r\n  }),\r\n  withRouter, // connecting to url parameter\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}
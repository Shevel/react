{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","path","name","fullPath","className","styles","dialog","active","to","Message","text","s","message","maxLength300","maxLengthCreator","DialogFormContainer","reduxForm","form","handleSubmit","sendMessageForm","onSubmit","Field","textarea","type","component","Textarea","validate","placeholder","DialogsContainer","compose","connect","state","messages","dialogsPage","messagesData","dialogs","dialogsData","dispatch","sendMessage","textMessage","actions","sendMessageActionCreator","withAuthRedirect","props","dialogsElements","map","key","length","id","messagesElements","string","dialogsItems","messages_content","dialogData"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,SAAW,0BAA0B,QAAU,yBAAyB,gBAAkB,iCAAiC,WAAa,4BAA4B,iBAAmB,oC,8FCQlVC,EAAoC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAClDC,EAAQ,mBAAeF,GAC7B,OACE,yBAAKG,UAAS,UAAKC,IAAOC,OAAZ,YAAsBD,IAAOE,SACzC,kBAAC,IAAD,CAASC,GAAIL,GAAWD,KCNjBO,EAAsC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpD,OACE,yBAAKN,UAAWO,IAAEC,SAAUF,I,iCCO1BG,EAAeC,YAAiB,KA2DhCC,EAAsBC,YAAgC,CAAEC,KAAM,eAAxCD,EAhBqB,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAClD,OACE,0BAAMd,UAAWC,IAAOc,gBAAiBC,SAAUF,GACjD,kBAACG,EAAA,EAAD,CACEjB,UAAWC,IAAOiB,SAClBC,KAAK,OACLrB,KAAK,cACLsB,UAAWC,IACXC,SAAU,CAACb,GACXc,YAAY,oBAEd,4BAAQvB,UAAU,OAAlB,oB,gCCzCAwB,EAAmBC,YACvBC,aAdsB,SAACC,GACvB,MAAO,CACLC,SAAUD,EAAME,YAAYC,aAC5BC,QAASJ,EAAME,YAAYG,gBAIJ,SAACC,GAC1B,MAAO,CACLC,YAAa,SAACC,GAAkBF,EAASG,IAAQC,yBAAyBF,SAM5EG,IAFuBb,EDX0B,SAACc,GAClD,IAAMC,EAAkBD,EAAMR,QAAQU,KAAI,SAACvC,GAAD,OACxC,kBAAC,EAAD,CACEwC,IAAKH,EAAMR,QAAQY,OAASzC,EAAO0C,GACnC9C,KAAMI,EAAOJ,KACbD,KAAMK,EAAO0C,QAIXC,EAAmBN,EAAMX,SAASa,KAAI,SAACjC,GAAD,OAC1C,kBAAC,EAAD,CAASkC,IAAKH,EAAMX,SAASe,OAASnC,EAAQoC,GAAItC,KAAME,EAAQsC,YAOlE,OACE,yBAAK9C,UAAWC,IAAO8B,SACrB,yBAAK/B,UAAWC,IAAO8C,cAAeP,GACtC,yBAAKxC,UAAWC,IAAO+C,kBACrB,yBAAKhD,UAAWC,IAAO2B,UAAWiB,GAClC,kBAAClC,EAAD,CAAqBK,SATN,SAACiC,GACpBV,EAAML,YAAYe,EAAWd,qBCElBX","file":"static/js/4.b25c0e3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IE0VQ\",\"dialogsItems\":\"Dialogs_dialogsItems__2O_9z\",\"active\":\"Dialogs_active__3iXVR\",\"textarea\":\"Dialogs_textarea__qynmD\",\"messages\":\"Dialogs_messages__2qB1V\",\"message\":\"Dialogs_message__3xriI\",\"sendMessageForm\":\"Dialogs_sendMessageForm__XkiSe\",\"sendButton\":\"Dialogs_sendButton__2oSId\",\"messages_content\":\"Dialogs_messages_content__huGQA\"};","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype DialogPropsType = {\r\n  path: number\r\n  name: string\r\n}\r\n\r\nexport const Dialog: React.FC<DialogPropsType> = ({ path, name }) => {\r\n  const fullPath = `/dialogs/${path}`;\r\n  return (\r\n    <div className={`${styles.dialog} ${styles.active}`}>\r\n      <NavLink to={fullPath}>{name}</NavLink>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n  text: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = ({ text }) => {\r\n  return (\r\n    <div className={s.message}>{text}</div>\r\n  )\r\n}","import React, { Dispatch } from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport '../../assets/styles/buttons.css';\r\nimport { Dialog } from \"./Dialog/Dialog\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { reduxForm, Field, InjectedFormProps } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormControls/FormControls\";\r\nimport { maxLengthCreator } from \"../../utils/validators\";\r\nimport { MessageType, DialogType } from '../../redux/dialogsReducer';\r\n\r\ntype DialogsPropsType = {\r\n  messages: Array<MessageType>\r\n  dialogs: Array<DialogType>\r\n  sendMessage: any\r\n}\r\n\r\nconst maxLength300 = maxLengthCreator(300);\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  const dialogsElements = props.dialogs.map((dialog) => (\r\n    <Dialog\r\n      key={props.dialogs.length - dialog.id}\r\n      name={dialog.name}\r\n      path={dialog.id}\r\n    />\r\n  ));\r\n\r\n  const messagesElements = props.messages.map((message) => (\r\n    <Message key={props.messages.length - message.id} text={message.string} />\r\n  ));\r\n\r\n  const handleSubmit = (dialogData: any) => {\r\n    props.sendMessage(dialogData.textMessage);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\r\n      <div className={styles.messages_content}>\r\n        <div className={styles.messages}>{messagesElements}</div>\r\n        <DialogFormContainer onSubmit={handleSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface IFormData {\r\n  textMessage: string;\r\n}\r\n\r\nexport interface IOwnProps {\r\n  onSubmit: any;\r\n}\r\n\r\nexport interface IDispatchProps {\r\n  onSubmit: (data: IFormData, dispatch: Dispatch<any>, props: IOwnProps) => void;\r\n}\r\ntype AllSampleFormProps = IOwnProps & IDispatchProps & InjectedFormProps<IFormData, IOwnProps>;\r\n\r\nconst DialogForm: React.FC<AllSampleFormProps> = ({ handleSubmit }) => {\r\n  return (\r\n    <form className={styles.sendMessageForm} onSubmit={handleSubmit}>\r\n      <Field\r\n        className={styles.textarea}\r\n        type=\"text\"\r\n        name=\"textMessage\"\r\n        component={Textarea}\r\n        validate={[maxLength300]}\r\n        placeholder=\"Enter message..\"\r\n      />\r\n      <button className='btn'>Send Message</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DialogFormContainer = reduxForm<IFormData, IOwnProps>({ form: \"dialogsForm\" })(DialogForm);\r\n","import { Dialogs } from './Dialogs';\r\nimport { actions } from '../../redux/dialogsReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessageType, DialogType } from '../../redux/dialogsReducer'\r\n\r\ntype MapStateToPropsType = {\r\n  messages: Array<MessageType>\r\n  dialogs: Array<DialogType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n  sendMessage: (textMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    messages: state.dialogsPage.messagesData,\r\n    dialogs: state.dialogsPage.dialogsData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\r\n  return {\r\n    sendMessage: (textMessage) => { dispatch(actions.sendMessageActionCreator(textMessage)) },\r\n  }\r\n}\r\n\r\nconst DialogsContainer = compose(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, null, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}
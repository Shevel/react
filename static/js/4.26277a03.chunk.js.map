{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Dialog","path","name","fullPath","className","styles","dialog","active","Message","text","s","message","maxLength300","maxLengthCreator","DialogFormContainer","reduxForm","form","handleSubmit","sendMessageForm","onSubmit","textarea","createField","Textarea","type","enterMessage","rows","onClick","DialogsContainer","compose","messages","dialogsPage","messagesData","dialogs","dialogsData","actions","dialogsElements","map","key","length","id","messagesElements","string","dialogsItems","messages_content","dialogData","sendMessage","textMessage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,SAAW,0BAA0B,QAAU,yBAAyB,gBAAkB,iCAAiC,WAAa,4BAA4B,iBAAmB,oC,gHCItYC,EAA6B,SAACC,GAClC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAQhB,SAASE,EAAsBC,GAUpC,OAJuCC,YAA4DN,EAA4B,GAAxFM,EAL+B,SAACC,GACpCA,EAAzBL,OADwE,IAC7DM,EAD4D,YAC9CD,EAD8C,YAE/E,OAAKA,EAAML,OACJ,kBAACG,EAAcG,GADM,kBAAC,IAAD,CAAUC,GAAG,gB,sGCThCC,EAAoC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAClDC,EAAQ,mBAAeF,GAC7B,OACE,yBAAKG,UAAS,UAAKC,IAAOC,OAAZ,YAAsBD,IAAOE,SACzC,kBAAC,IAAD,CAASR,GAAII,GAAWD,KCNjBM,EAAsC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpD,OACE,yBAAKL,UAAWM,IAAEC,SAAUF,I,mCCU1BG,EAAeC,YAAiB,KAuDhCC,EAAsBC,YAAgC,CAAEC,KAAM,eAAxCD,EAZqB,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAClD,OACE,0BAAMb,UAAWC,IAAOa,gBAAiBC,SAAUF,GACjD,yBAAKb,UAAWC,IAAOe,UACpBC,YAA0C,gBAAiB,cAAe,CAACT,GAAeU,IAAU,CAAEC,KAAM,OAAQnB,UAAWC,IAAOmB,aAAcC,KAAM,KAG7J,kBAAC,IAAD,CAAQF,KAAK,UAAUG,QAAST,GAAhC,Y,kCC9CAU,EAAmBC,YACvBhC,aARsB,SAACL,GACvB,MAAO,CACLsC,SAAUtC,EAAMuC,YAAYC,aAC5BC,QAASzC,EAAMuC,YAAYG,eAKtB,eAAwFC,MAC/FxC,IAFuBkC,EDF0B,SAAC/B,GAClD,IAAMsC,EAAkBtC,EAAMmC,QAAQI,KAAI,SAAC9B,GAAD,OACxC,kBAAC,EAAD,CACE+B,IAAKxC,EAAMmC,QAAQM,OAAShC,EAAOiC,GACnCrC,KAAMI,EAAOJ,KACbD,KAAMK,EAAOiC,QAIXC,EAAmB3C,EAAMgC,SAASO,KAAI,SAACzB,GAAD,OAC1C,kBAAC,EAAD,CAAS0B,IAAKxC,EAAMgC,SAASS,OAAS3B,EAAQ4B,GAAI9B,KAAME,EAAQ8B,YAOlE,OACE,yBAAKrC,UAAWC,IAAO2B,SACrB,yBAAK5B,UAAWC,IAAOqC,cAAeP,GACtC,yBAAK/B,UAAWC,IAAOsC,kBACrB,yBAAKvC,UAAWC,IAAOwB,UAAWW,GAClC,kBAAC1B,EAAD,CAAqBK,SATN,SAACyB,GACpB/C,EAAMgD,YAAYD,EAAWE,qBCPlBnB","file":"static/js/4.26277a03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3p5Iq\",\"enterMessage\":\"Dialogs_enterMessage__1UaUx\",\"dialogsItems\":\"Dialogs_dialogsItems__AqaeT\",\"active\":\"Dialogs_active__3hUGH\",\"textarea\":\"Dialogs_textarea__3yIfH\",\"messages\":\"Dialogs_messages__1zZTP\",\"message\":\"Dialogs_message__38ZUo\",\"sendMessageForm\":\"Dialogs_sendMessageForm__3N8Ye\",\"sendButton\":\"Dialogs_sendButton__1rKrj\",\"messages_content\":\"Dialogs_messages_content__Xap1q\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) { return <Redirect to=\"/login\" />; }\r\n    return <Component {...restProps as WCP} />;\r\n  }\r\n  const ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype DialogPropsType = {\r\n  path: number\r\n  name: string\r\n}\r\n\r\nexport const Dialog: React.FC<DialogPropsType> = ({ path, name }) => {\r\n  const fullPath = `/dialogs/${path}`;\r\n  return (\r\n    <div className={`${styles.dialog} ${styles.active}`}>\r\n      <NavLink to={fullPath}>{name}</NavLink>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n  text: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = ({ text }) => {\r\n  return (\r\n    <div className={s.message}>{text}</div>\r\n  )\r\n}","import React, { Dispatch } from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport '../../assets/styles/buttons.css';\r\nimport { Dialog } from \"./Dialog/Dialog\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { createField, Textarea } from \"../common/FormControls/FormControls\";\r\nimport { maxLengthCreator } from \"../../utils/validators\";\r\nimport { MessageType, DialogType } from '../../redux/dialogsReducer';\r\nimport { Button } from \"antd\";\r\n\r\ntype DialogsPropsType = {\r\n  messages: Array<MessageType>\r\n  dialogs: Array<DialogType>\r\n  sendMessage: (messageText: string) => void\r\n}\r\ntype NewMessageFormType = {\r\n  textMessage: string\r\n}\r\nconst maxLength300 = maxLengthCreator(300);\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  const dialogsElements = props.dialogs.map((dialog) => (\r\n    <Dialog\r\n      key={props.dialogs.length - dialog.id}\r\n      name={dialog.name}\r\n      path={dialog.id}\r\n    />\r\n  ));\r\n\r\n  const messagesElements = props.messages.map((message) => (\r\n    <Message key={props.messages.length - message.id} text={message.string} />\r\n  ));\r\n\r\n  const handleSubmit = (dialogData: NewMessageFormType) => {\r\n    props.sendMessage(dialogData.textMessage);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\r\n      <div className={styles.messages_content}>\r\n        <div className={styles.messages}>{messagesElements}</div>\r\n        <DialogFormContainer onSubmit={handleSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface IFormData {\r\n  textMessage: string;\r\n}\r\n\r\nexport interface IOwnProps {\r\n  onSubmit: any;\r\n}\r\n\r\nexport interface IDispatchProps {\r\n  onSubmit: (data: IFormData, dispatch: Dispatch<any>, props: IOwnProps) => void;\r\n}\r\ntype AllSampleFormProps = IOwnProps & IDispatchProps & InjectedFormProps<IFormData, IOwnProps>;\r\ntype NewMessageFromValuesKeysType = Extract<keyof NewMessageFormType, string>\r\nconst DialogForm: React.FC<AllSampleFormProps> = ({ handleSubmit }) => {\r\n  return (\r\n    <form className={styles.sendMessageForm} onSubmit={handleSubmit}>\r\n      <div className={styles.textarea}>\r\n        {createField<NewMessageFromValuesKeysType>('Enter message', 'textMessage', [maxLength300], Textarea, { type: 'text', className: styles.enterMessage, rows: 1 })}\r\n      </div>\r\n\r\n      <Button type='primary' onClick={handleSubmit}>Send</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DialogFormContainer = reduxForm<IFormData, IOwnProps>({ form: \"dialogsForm\" })(DialogForm);\r\n","import { Dialogs } from './Dialogs';\r\nimport { actions } from '../../redux/dialogsReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessageType, DialogType } from '../../redux/dialogsReducer'\r\n\r\ntype MapStateToPropsType = {\r\n  messages: Array<MessageType>\r\n  dialogs: Array<DialogType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n  sendMessage: (textMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    messages: state.dialogsPage.messagesData,\r\n    dialogs: state.dialogsPage.dialogsData,\r\n  }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, null, AppStateType>(mapStateToProps, { ...actions }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}